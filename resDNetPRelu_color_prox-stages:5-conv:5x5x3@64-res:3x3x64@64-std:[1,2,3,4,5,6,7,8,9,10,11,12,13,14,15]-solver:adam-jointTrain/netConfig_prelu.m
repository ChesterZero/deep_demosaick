function net = netConfig_prelu(gpu_id,name_id,noise_std,batchSize)

if nargin < 4, batchSize = 100; end

% Network Params
numFilts = 64;
numFilts2 = 64;
resnetLayers = 5;
hdims = [5 5 3 numFilts];
fdims = [3 3 numFilts numFilts2];
fdims2 = [3 3 numFilts2 numFilts];
%fdims2 = [3 3 1  numFilts];


resLayer = 'resPreActivationLayer_prelu';
a1 = 0.1*ones(1,numFilts2); % prelu parameter for residual layer
a2 = 0.1*ones(1,numFilts); % prelu parameter for residual layer

s1 = 1e-1*ones(1,numFilts2); % conv2D normalization constant for residual layer
s2 = 1e-1*ones(1,numFilts); % conv2D normalization constant for residual layer

opts.net_struct={struct('layer_type','conv2D'), ...
  struct('layer_type',resLayer,'shortcut',false), ...
  struct('layer_type',resLayer), ...
  struct('layer_type','conv2Dt'), ...
  struct('layer_type', 'l2Proj'), ...
  struct('layer_type', 'subs'), ...
  struct('layer_type','clamp','lastLayer',true),...
  struct('layer_type','imloss')};

opts.net_struct = [opts.net_struct(1:2) ...
  repmat(opts.net_struct(3),1,resnetLayers-1) opts.net_struct(4:end)];

% Training Params
numEpochs = 150; 
learningRate = [1e-2*ones(1,120) 1e-3*ones(1,20) 1e-4*ones(1,10)];
imdbPath = '../../datasets/imdb_color.mat';

net = resDNet_joint_train([], 'net_struct', opts.net_struct, 'name_id',...
  name_id, 'resnetLayers', resnetLayers, 'gpus', gpu_id, ...
  'plotStatistics', false, 'imdbPath', imdbPath, 'hdims', hdims, ...
  'zeroMeanFilters_h', true, 'weightNormalization_h', true, 'init_h', ...
  'dct', 'fdims', fdims, 'fdims2', fdims2, 'zeroMeanFilters', true(1,2), ...
  'weightNormalization', true(1,2), 'shortcut', true, ...
  'resPreActivationInit', 'msra', 'pa_a', a1, 'pa_a2', a2, 'rs', s1, ...
  'rs2', s2, 'lr_res', ones(1,8), 'noise_std', noise_std, 'solver', ...
  @solver.adam, 'solverOpts', struct('beta1',0.9,'beta2',0.999,'eps',1e-4), ...
  'learningRate', learningRate, 'numEpochs', numEpochs, 'batchSize', ...
  batchSize, 'clb', 0,'cub', 255,'peakVal',255,'intScale',1);
